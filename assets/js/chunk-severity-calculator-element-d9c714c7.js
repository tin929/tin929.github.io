System.register(["./chunk-vendor.js","./chunk-frameworks.js"],(function(t){"use strict";var e,r,i,o,s,n;return{setters:[function(t){e=t._,r=t.t,i=t.b,o=t.d,s=t.c},function(t){n=t.v}],execute:function(){const c={AV:{N:!0,A:!0,L:!0,P:!0},AC:{L:!0,H:!0},PR:{N:!0,L:!0,H:!0},UI:{N:!0,R:!0},S:{U:!0,C:!0},C:{N:!0,L:!0,H:!0},I:{N:!0,L:!0,H:!0},A:{N:!0,L:!0,H:!0}},l={critical:"Label--danger",high:"Label--orange",moderate:"Label--warning",low:"Label--primary"};let a=class SeverityCalculatorElement extends HTMLElement{constructor(){super(...arguments),this.pendingScoreTextColorClass="color-text-tertiary"}hide(){this.hidden=!0,this.vectorStringInput.required=!1,this.hideFormGroupError(this.vectorStringFieldElement),this.vectorStringInput.setCustomValidity(""),n(this.vectorStringInput.form)}show(){this.hidden=!1,this.vectorStringInput.required=!0,""!==this.vectorStringInput.value&&this.validateVectorStringInput()}hideFormGroupError(t){t.classList.contains("errored")&&t.classList.remove("errored")}showFormGroupError(t){t.classList.contains("errored")||t.classList.add("errored")}isValidCVSS3(t){return""===this.buildCVSS3ErrorMessage(t)}buildCVSS3ErrorMessage(t){if(""===t)return this.vectorStringError.getAttribute("data-empty-cvss-error-message");if(!/^CVSS:3\.\d+(\/[^:]+:[^:]+){8}$/.test(t))return this.vectorStringError.getAttribute("data-error-message");const e=t.split("/").slice(1);for(const r of e){const[t,e]=r.split(":");if(!c[t]){return this.vectorStringError.getAttribute("data-invalid-metric-error-message").replace("{}",t)}if(!c[t][e]){return this.vectorStringError.getAttribute("data-invalid-metric-value-error-message").replace("{}",e).replace("{}",t)}}return""}validateVectorStringInput(){const t=this.buildCVSS3ErrorMessage(this.vectorStringInput.value);return t?(this.vectorStringError.textContent=t,this.showFormGroupError(this.vectorStringFieldElement),this.vectorStringInput.setCustomValidity("error")):(this.hideFormGroupError(this.vectorStringFieldElement),this.vectorStringInput.setCustomValidity("")),n(this.vectorStringInput.form),!t}handleVectorStringBlur(){this.validateVectorStringInput()?(this.calculateScore(),this.scoreElement.classList.remove(this.pendingScoreTextColorClass)):(this.hideSeverityLabel(),this.scoreElement.textContent=this.scoreElement.getAttribute("data-empty-message"),this.scoreElement.classList.add(this.pendingScoreTextColorClass))}connectedCallback(){this.handleVectorStringInput()}handleVectorStringInput(){const t=this.vectorStringInput.value.split("/").slice(1).reduce(((t,e)=>{const[r,i]=e.split(":");return Object.assign(Object.assign({},t),{[r]:i})}),{});for(const e of this.metricSelectionElements){const r=t[e.metricCode];e.selectFromCode(r)}}regenerateVectorString(){let t="CVSS:3.1";for(const e of this.metricSelectionElements){t+=`/${e.metricCode}:${e.selectedValue||"_"}`}this.vectorStringInput.value=t}handleMetricSelectionChange(){this.regenerateVectorString(),this.hideFormGroupError(this.vectorStringFieldElement),this.isValidCVSS3(this.vectorStringInput.value)?(this.vectorStringInput.setCustomValidity(""),this.calculateScore(),this.scoreElement.classList.remove(this.pendingScoreTextColorClass)):this.vectorStringInput.setCustomValidity("error"),n(this.vectorStringInput.form)}async calculateScore(){let t;this.hideFormGroupError(this.scoreFieldElement);try{t=await this.fetchScoreData()}catch(r){return void this.showFormGroupError(this.scoreFieldElement)}this.scoreElement.textContent=t.score.toFixed(1);const e=t.severity.toLowerCase();this.showSeverityLabel(e)}async fetchScoreData(){const t=new FormData;t.append("cvss_v3",this.vectorStringInput.value);const e=this.scoreElement.getAttribute("data-action-url");if(!e)throw new Error("The endpoint url to get the score must be specified");const r=await fetch(e,{method:"POST",headers:{Accept:"application/json","Scoped-CSRF-Token":this.scoreAuthenticityTokenInput.value},body:t});return r.ok?r.json():Promise.reject(new Error("Score could not be calculated"))}hideSeverityLabel(){this.severityLabelElement.hidden=!0}showSeverityLabel(t){this.severityLabelElement.textContent=t;const e=l[t];this.severityLabelElement.classList.contains(e)||(this.severityLabelElement.classList.remove(...Object.values(l)),this.severityLabelElement.classList.add(e)),this.severityLabelElement.hidden&&(this.severityLabelElement.hidden=!1)}};e([r],a.prototype,"vectorStringFieldElement",void 0),e([r],a.prototype,"vectorStringInput",void 0),e([r],a.prototype,"vectorStringError",void 0),e([i],a.prototype,"metricSelectionElements",void 0),e([r],a.prototype,"scoreFieldElement",void 0),e([r],a.prototype,"scoreAuthenticityTokenInput",void 0),e([r],a.prototype,"scoreElement",void 0),e([r],a.prototype,"severityLabelElement",void 0),e([o(100)],a.prototype,"handleVectorStringInput",null),a=e([s],a);t("default",a)}}}));
//# sourceMappingURL=chunk-severity-calculator-element-2ca49400.js.map
